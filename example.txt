func main() {
	settings := &settings{}
	settings.SetSettings(queuePath)

	for _, url := range settings.ToDownload {

		fmt.Println("Started with URL: ", url)

		node, err := downloader.FetchDynamicHTML(url)

		if err != nil {
			fmt.Println("Error fetching HTML: ", err)
			return
		}

		links := downloader.ExtractLinks(node, url)
		for _, link := range links {
			fmt.Println(link)
		}
	}
}


func main() {
	// Получение IP-адресов по доменному имени
	ips, err := net.LookupIP("example.com")
	if err != nil {
		fmt.Println("DNS lookup failed:", err)
		return
	}

	for _, ip := range ips {
		fmt.Println("IP:", ip)
	}
}






		htmlPage, err := downloader.FetchDynamicHTML(ctx, url, resolver)

		if err != nil {
			fmt.Println("Error fetching HTML: ", err)
			return
		}
		host, err := downloader.GetHost(url)
		if err != nil {
			fmt.Printf("Getting host from url falied: %v\n", err)
			return
		}

		out := &db.CrawledContent{
			DOMAIN:      host,
			URL:         url,
			TextContent: "empty",
			Title:       "empty",
			Metadata:    nil,
			ContentHash: hashMD5(htmlPage[int(float64(len(htmlPage))*0.8):]),
			CrawledAt:   time.Now(),
		}

		// =================<>==================

		exists, err := storage.ExistsByURL(context.Background(), out.URL)

		if err != nil {
			log.Printf("Error checking content: %v", err)
		}
		if exists {
			log.Println("Content already exists, skipping ", out.URL, " by worker ", w.id)
			continue
		}

		if err := storage.Save(context.Background(), out); err != nil {
			log.Printf("Failed to save content: %v", err)
		} else {
			log.Println("Content saved successfully ", out.URL, " by worker ", w.id)
		}